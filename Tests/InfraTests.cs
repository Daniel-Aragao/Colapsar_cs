using Core.models;
using Infra.services;
using Infra.services.regions;

using System;
using System.Collections.Generic;
using System.Linq;

using Xunit;

namespace Tests
{
    public class InfraTests
    {
        const double MIN_DIFFERENCE = 0.000001;
        const int ROUND_FIXED = 5;
        const int ROUND_FIXED_FOR_DISTANCE = 2;
        public const string file_path = "misc/";
        // public const string file_path = "/home/daniel/Documentos/Git/Colapsar_cs/Tests/misc/";
        // (.*Colapsar_cs\/).*
        // public const string file_path = "/home/danielaragao/Documents/Git/Colapsar_cs/Tests/misc/";

        Func<Graph>[] Gs;

        NodeEqualityComparer nodeEqualityComparer = new NodeEqualityComparer();

        public InfraTests()
        {
            Gs = new Func<Graph>[] { G0, G1 };
        }

        private Graph G0()
        {
            Graph g = new Graph("test graph 0 latitude, longetude");

            g.CreateNode(245656627, "cross");
            g.CreateNode(4294951432, "cross");
            g.CreateNode(4294951452, "cross");
            g.CreateNode(4294951453, "cross");

            g.CreateEdge(4294951453, 4294951452, 72.14034314043423).PutAttribute("type_route", "driving");
            g.CreateEdge(4294951452, 4294951432, 154.2815560270423).PutAttribute("type_route", "driving");
            g.CreateEdge(4294951432, 245656627, 11.210694705547965).PutAttribute("type_route", "driving");
            g.CreateEdge(245656627, 4294951453, 80.210694705547965).PutAttribute("type_route", "driving");

            return g;
        }

        private Graph G1()
        {
            Graph g = new Graph("test graph 1 x,y");

            g.CreateNode(64, "sintetic");
            g.CreateNode(65, "sintetic");
            g.CreateNode(84, "sintetic");
            g.CreateNode(85, "sintetic");

            g.CreateEdge(64, 84, 1);
            g.CreateEdge(65, 85, 1);
            g.CreateEdge(84, 65, 1);
            g.CreateEdge(85, 64, 1);

            return g;
        }

        public Graph getGraph(int id)
        {
            return Gs[id]();
        }

        [Fact]
        public void LoadCityFromText_TestGraph1()
        {
            Graph graphImported = Import.LoadCityFromText(file_path + "test_graph_1.txt");

            Assert.True(getGraph(0).Equals(graphImported));
        }

        [Fact]
        public void FailOnLoadCityFromText_TestGraph1()
        {
            Graph graphImported = Import.LoadCityFromText(file_path + "test_graph_1.txt");
            var g = getGraph(0);

            g.GetEdgeByIndex(2).PutAttribute("type_route", 14);

            Assert.False(g.Equals(graphImported));
        }

        [Fact]
        public void LoadCityFromText_TestGraph2()
        {
            Graph graphImported = Import.LoadCityFromText(file_path + "test_graph_2.txt");

            Assert.True(getGraph(1).Equals(graphImported));
        }

        [Fact]
        public void FailOnLoadCityFromText_TestGraph2()
        {
            Graph graphImported = Import.LoadCityFromText(file_path + "test_graph_2.txt");
            var g = getGraph(1);

            g.GetEdgeByIndex(2).PutAttribute("type_route", 14);

            Assert.False(g.Equals(graphImported));
        }

        [Fact]
        public void GetNeightboursInRadius100ForNorvigGraph()
        {
            Graph graph = Import.LoadCityFromText(InfraTests.file_path + "test_graph_3.norvig.txt");
            var bucharest = graph.GetNodeByLabel("Bucharest");

            var nodes = graph.GetNodesByRadius(bucharest, 100);

            var nodesIds = from node in nodes select node.Id;

            Assert.Equal(new long[] { 12, 13, 14, 15 }, nodesIds);
        }

        [Fact]
        public void GetNeightboursInRadius200ForNorvigGraph()
        {
            Graph graph = Import.LoadCityFromText(InfraTests.file_path + "test_graph_3.norvig.txt");
            var bucharest = graph.GetNodeByLabel("Bucharest");

            var nodes = graph.GetNodesByRadius(bucharest, 200);

            var nodesIds = from node in nodes select node.Id;

            Assert.Equal(new long[] { 8, 9, 11, 12, 13, 14, 15, 16, 17, 18 }, nodesIds);
        }

        [Fact]
        public void CollapseBucharestFromNorvigGraphCorrectlyWithRadius100()
        {
            Graph graph = Import.LoadCityFromText(InfraTests.file_path + "test_graph_3.norvig.txt");

            var bucharest = graph.GetNodeByLabel("Bucharest");

            var superNode = Collapse.collapse(graph, bucharest, 100, -2, 3);

            Assert.Equal(-2, superNode.Id);
            Assert.Equal(3, superNode.Weight);

            var superNodeEdgesIn = (from edge in superNode.EdgesIn()
                                    select edge.Source.Id).ToList();

            var superNodeEdgesOut = (from edge in superNode.EdgesOut()
                                     select edge.Target.Id).ToList();

            Assert.Equal(new long[] { 8, 9, 13, 11, 12, 14, 15, 13, 13, 16, 18 }, superNodeEdgesIn);
            Assert.Equal(new long[] { 8, 9, 13, 11, 12, 14, 15, 13, 13, 16, 18 }, superNodeEdgesOut);
        }

        [Fact]
        public void CollapseBucharestFromNorvigGraphCorrectlyWithRadius200()
        {
            Graph graph = Import.LoadCityFromText(InfraTests.file_path + "test_graph_3.norvig.txt");

            var bucharest = graph.GetNodeByLabel("Bucharest");

            var superNode = Collapse.collapse(graph, bucharest, 200, -2, 3);

            Assert.Equal(-2, superNode.Id);
            Assert.Equal(3, superNode.Weight);

            var superNodeEdgesIn = (from edge in superNode.EdgesIn()
                                    select edge.Source.Id).ToList();

            var superNodeEdgesOut = (from edge in superNode.EdgesOut()
                                     select edge.Target.Id).ToList();
            // 8 9 11 12 13 14 15 16 17 18
            Assert.Equal(new long[] { 7, 9, 12, 8, 10, 12, 10, 13, 8, 9, 13, 11, 12, 14, 15, 13, 13, 16, 18, 15, 17, 16, 15, 19 }, superNodeEdgesIn);
            Assert.Equal(new long[] { 7, 9, 12, 8, 10, 12, 10, 13, 8, 9, 13, 11, 12, 14, 15, 13, 13, 16, 18, 15, 17, 16, 15, 19 }, superNodeEdgesOut);
        }

        [Fact]
        public void CollapseNode4FromAvgplengthGraphCorrectlyWithRadius1()
        {
            Graph graph = Import.LoadCityFromText(InfraTests.file_path + "test_graph_5.avgplength.txt");

            var p_4 = graph.GetNodeById(4);

            var superNode = Collapse.collapse(graph, p_4, 1.5, -70, 7);

            Assert.Equal(-70, superNode.Id);
            Assert.Equal(7, superNode.Weight);

            var superNodeEdgesIn = (from edge in superNode.EdgesIn()
                                    select edge.Source.Id).ToList();

            var superNodeEdgesOut = (from edge in superNode.EdgesOut()
                                     select edge.Target.Id).ToList();

            Assert.Equal(new long[] { 1, 2, 4, 3 }, superNodeEdgesIn);
            Assert.Equal(new long[] { 1, 2, 4, 3 }, superNodeEdgesOut);
        }

        [Fact]
        public void CollapseBucharestFromNorvigGraphCorrectlyWithRadius200AndReturnTheCorrectGraph()
        {
            Graph graphCollapsed = Import.LoadCityFromText(InfraTests.file_path + "test_graph_3.norvig.txt");
            Graph graphOriginal = Import.LoadCityFromText(InfraTests.file_path + "test_graph_3.norvig.txt");

            var bucharest = graphCollapsed.GetNodeByLabel("Bucharest");

            var superNode = Collapse.collapse(graphCollapsed, bucharest, 200, -2, 3);

            Assert.Equal(graphOriginal.NodesSize + 1, graphCollapsed.NodesSize);
            Assert.Equal(graphOriginal.EdgesSize + 48, graphCollapsed.EdgesSize);
        }

        [Fact]
        public void CollapseBucharestFromNorvigGraphCorrectlyWithRadius200ExpandAndReturnTheCorrectGraph()
        {
            Graph graphCollapsed = Import.LoadCityFromText(InfraTests.file_path + "test_graph_3.norvig.txt");
            Graph graphOriginal = Import.LoadCityFromText(InfraTests.file_path + "test_graph_3.norvig.txt");

            var bucharest = graphCollapsed.GetNodeByLabel("Bucharest");

            var superNode = Collapse.collapse(graphCollapsed, bucharest, 200, -2, 3);

            Collapse.Expand(graphCollapsed, superNode);

            Assert.Equal(graphOriginal, graphCollapsed);
        }

        [Fact]
        public void BruteForceShouldReturntheCorrectPathForFortalezaFrom4999867293To2653761784()
        {
            //4999867293,2653761784,205,0,433,11688.533781154416,4999867293;616325567;4999867291;616325565;4999867292;4999867287;4999867289;4999867290;616325564;4999867288;2019296205;616325587;2819355907;4408703885;4323527232;4408703874;4544824698;5253367654;4323527228;5253367653;4543196816;4543196818;4544824716;4544824720;587735159;587735160;587735155;2273336942;571728179;571728175;619231050;4466666145;619231052;3694543671;574430580;574430532;621557194;571723605;571723606;616348223;2047462911;2047462800;2423798676;2507386645;2047462796;616676257;621557182;263930332;263930340;263930344;263930346;4421972787;263930351;2281467287;263930355;2274599725;2792500451;616541854;4421972793;1953882317;5448663843;1896464178;616541906;4421972794;263930363;616541869;2274599722;263930365;2281466695;2281466457;263930369;622540030;2281466456;263930371;2281466453;263930374;616541931;2281466439;4421972803;4419462357;1974304858;4419462354;1974304834;4419462376;622541776;2281465294;263930391;263930394;2281465290;263930397;2281465154;263930400;622541728;2265497140;2432911106;263930402;2794717707;263930404;2281465148;2281465146;263930407;263930410;2794717704;263930412;2281465140;263930416;253390880;622541696;2422678003;622541219;622541417;253390882;253390883;253390884;253390885;1974309513;2283197355;253390888;2283197354;253390889;253390890;2281462076;253390891;2281462073;253390793;2281461454;253390792;2281462078;2281461449;2504592750;253390901;253390791;2422683832;622541286;622541279;2856243310;253390790;253390789;1978271799;1978271787;1978271780;1978268964;622539329;2338622961;2338622967;4348856660;5046718969;4455765410;2275856299;264943496;2275860666;4680698419;264943499;2275860675;264943500;2277784242;2277784275;2508981102;5046745662;2281285089;2281285092;2281285093;2508980138;2508980146;2281285098;2281285101;2338622968;2338622973;2338622971;2506608725;2654769073;4421986812;1704817134;1704817155;2506608715;2653874308;2506608719;2506608720;3694547046;3694547036;3694547048;3694547050;3694547034;3694547029;3694547066;3694547042;3694547040;3694547031;3694546524;3694547056;3694547026;3694547033;3694547053;3694547072;3694547096;3694547075;3694547068;3694546522;3694547089;3694547084;3694547095;3694547083;1704762016;1704762086;1704762174;2653761784
            var expectedIds = new long[] { 4999867293, 616325567, 4999867291, 616325565, 4999867292, 4999867287, 4999867289, 4999867290, 616325564, 4999867288, 2019296205, 616325587, 2819355907, 4408703885, 4323527232, 4408703874, 4544824698, 5253367654, 4323527228, 5253367653, 4543196816, 4543196818, 4544824716, 4544824720, 587735159, 587735160, 587735155, 2273336942, 571728179, 571728175, 619231050, 4466666145, 619231052, 3694543671, 574430580, 574430532, 621557194, 571723605, 571723606, 616348223, 2047462911, 2047462800, 2423798676, 2507386645, 2047462796, 616676257, 621557182, 263930332, 263930340, 263930344, 263930346, 4421972787, 263930351, 2281467287, 263930355, 2274599725, 2792500451, 616541854, 4421972793, 1953882317, 5448663843, 1896464178, 616541906, 4421972794, 263930363, 616541869, 2274599722, 263930365, 2281466695, 2281466457, 263930369, 622540030, 2281466456, 263930371, 2281466453, 263930374, 616541931, 2281466439, 4421972803, 4419462357, 1974304858, 4419462354, 1974304834, 4419462376, 622541776, 2281465294, 263930391, 263930394, 2281465290, 263930397, 2281465154, 263930400, 622541728, 2265497140, 2432911106, 263930402, 2794717707, 263930404, 2281465148, 2281465146, 263930407, 263930410, 2794717704, 263930412, 2281465140, 263930416, 253390880, 622541696, 2422678003, 622541219, 622541417, 253390882, 253390883, 253390884, 253390885, 1974309513, 2283197355, 253390888, 2283197354, 253390889, 253390890, 2281462076, 253390891, 2281462073, 253390793, 2281461454, 253390792, 2281462078, 2281461449, 2504592750, 253390901, 253390791, 2422683832, 622541286, 622541279, 2856243310, 253390790, 253390789, 1978271799, 1978271787, 1978271780, 1978268964, 622539329, 2338622961, 2338622967, 4348856660, 5046718969, 4455765410, 2275856299, 264943496, 2275860666, 4680698419, 264943499, 2275860675, 264943500, 2277784242, 2277784275, 2508981102, 5046745662, 2281285089, 2281285092, 2281285093, 2508980138, 2508980146, 2281285098, 2281285101, 2338622968, 2338622973, 2338622971, 2506608725, 2654769073, 4421986812, 1704817134, 1704817155, 2506608715, 2653874308, 2506608719, 2506608720, 3694547046, 3694547036, 3694547048, 3694547050, 3694547034, 3694547029, 3694547066, 3694547042, 3694547040, 3694547031, 3694546524, 3694547056, 3694547026, 3694547033, 3694547053, 3694547072, 3694547096, 3694547075, 3694547068, 3694546522, 3694547089, 3694547084, 3694547095, 3694547083, 1704762016, 1704762086, 1704762174, 2653761784 };
            Graph graph = Import.LoadCityFromText(InfraTests.file_path + "Fortaleza-network-osm-2018-1_1.txt");

            SearchStrategy BruteForceStrategy = new BruteForce(graph);
            var p_4999867293 = graph.GetNodeById(4999867293);
            var p_2653761784 = graph.GetNodeById(2653761784);

            PathRoute pathRoute = BruteForceStrategy.Search(p_4999867293, p_2653761784, 50);

            Assert.Equal(EPathStatus.Found, pathRoute.Status);

            var resultIds = from node in pathRoute.Nodes select node.Id;

            Assert.Equal(Math.Round(11688.53378, InfraTests.ROUND_FIXED_FOR_DISTANCE),Math.Round(pathRoute.Distance, InfraTests.ROUND_FIXED_FOR_DISTANCE));
            Assert.Equal(205, pathRoute.Jumps);
            Assert.Equal(5037, pathRoute.QuantityOfExpansions);
            Assert.Equal(expectedIds, resultIds);
        }

        [Fact]
        public void BruteForceShouldReturntheCorrectPathForFortalezaFrom3240206929To2824939670()
        {
            //3240206929,2824939670,466,0,7975,26881.92779831911,3240206929;2858734900;3240206928;2858734898;2858736004;2858736009;2858736007;2858736037;2858762424;2858762426;2858762427;2527408471;2858762458;2858767004;2858767005;3240206913;2858767006;2858768521;2858766698;2858768526;2858768517;2858776684;2527410953;2527410959;2527408460;2858789542;2858789562;2527408457;2527408453;2527408451;2527408448;2527408445;2527408442;2527408439;2527408437;2858877467;2527408434;2527408431;2527408429;2859978919;2527408426;3990984434;2527408423;2527408420;3990984433;2527408416;2527408413;3990984431;3990984430;3990984427;2527301728;3990984435;4075192320;2527408397;2527394272;2527394275;4442503244;1326628360;1704819677;4442503240;1704819674;4442503242;2860025778;2527394278;2527394280;1327035247;1704819584;1704819583;1704819582;1704819581;1704819552;2858676327;1704819544;1668155050;1704819514;1668155047;1704819485;2506546967;2506546966;5202462858;1704819458;2506546970;1704819454;5202462861;1725228461;2521258304;2521253404;2623048757;4442503248;2506547096;4389404976;4389404979;2506547090;2506546987;4389404986;1704843955;2506546994;1704732646;1704843952;1704732635;2857991933;2857991932;2857991931;2857991930;1704732582;1704732572;1704732540;2857991909;1704732543;1704732538;1704732536;2857991924;2857991911;1704732533;1704732529;1704732528;1704732521;2857020295;3240206425;2857020294;1704732415;1704732275;1704732060;1704731947;1704731819;4952722773;1704731697;1704731618;2653769676;4422009779;4422009784;1704731492;1704731400;1704731325;1704731141;2508952363;4301339282;1704731040;1704730963;2281378243;1704730922;2338622946;4396289668;1704730612;4396289669;4396289670;4396289671;5143779464;2338622972;2338622942;3726096057;2508980150;2508980155;3694547074;3694547041;3771292777;3771292778;3771292779;3771292780;3771292781;3771292782;3771292783;3771292784;3771292785;3694547062;4396343171;2506650013;4396343173;1892628887;1892628995;1892629021;1892628904;1892629253;1892629180;1892628915;1892629115;1892628913;1892629005;1892629006;2048208656;2048208683;264943621;2048208646;2048208720;2048208685;264943618;2048208713;2048208709;2048208665;264943616;2048208663;2048208659;1702963589;2048208644;2048208671;2048208635;1702963526;264943610;2854136337;2048208679;264943608;2048191382;2018997172;264943603;2048191384;2048191375;2048191364;2854137610;2048191366;264943595;1612590849;264943593;264943592;4476004524;2854130627;1892629235;5137545208;2048222684;2048222681;1702963416;2017571395;3990984245;4396367249;1702963423;1702963421;5137545213;2017571285;2017571271;2017571264;2017571236;2017571258;2017571247;2017571470;2017571480;2017571411;2017571224;1892629225;2069267735;2017571205;2017571391;2017571379;1895463095;1895468690;1895479612;4396414200;2017571490;2017571283;2017571494;2017571417;2017571413;2017571427;2017571288;2017571431;2017571298;2017571373;2017571201;264943665;4411522011;3761441152;3761447359;4109056605;1703094272;4228511567;264943666;264943668;4993449266;1903568762;1903568828;264943671;264943673;2245144912;264943675;264943676;1275276019;1275276036;2245172160;1275276080;1275276040;2245172159;1275276043;1275276079;1275276077;1903568109;5163833735;2240580420;5163833734;2275565964;1903568715;2274585372;2275555350;1275276065;1275276039;1275276120;4815982862;1275276129;1275276066;2426667548;4402649078;1285207995;1275276056;1275276146;1275276015;1275276098;5347872154;1275276137;1275276142;1275276141;1275276093;3364478042;3364447574;4349648401;4663428690;4663428689;1295783179;2624211652;1295783342;1288548141;1288548437;1288548419;2846077151;1703074856;1703074853;1703074848;1703074844;1703074840;1703074837;1703074834;2846077144;1295783062;2722597761;1295783241;1295783154;1295783164;1295783196;1295782996;1703403070;1703403054;1703403047;1703403034;1703403028;3240093693;1295782967;1295782805;1295783136;1295783309;2844130245;1703402968;2844122703;2844122702;1295783147;1295783676;1295783850;1295782828;1295783283;1295783867;1295782724;2844119139;2844119133;3920955061;1295783591;1295783073;1295783878;1295782750;4324462380;1295783772;1295783167;1295782934;1295782951;1295782557;1295783500;1295783223;1295782639;1295783752;1295783098;2722597712;2722597711;264899071;1302848053;4343796092;1302847924;1302847893;1302848007;1302847907;1302847928;2822761838;3418240323;1289742219;1714741268;1714741264;1289742181;1714788208;1714741241;1714741222;1714741216;1289742200;1289742083;1289742311;1304307196;1714741195;1290380605;1714788047;1290380586;1714741181;1714788041;1714788037;1714741175;1714788031;1289742211;1289742148;2822800581;2822800583;2822800585;1714787999;2822800849;2822800851;2822800852;2822800854;2822800855;2822800856;2822800857;2822800858;2822800859;1714787834;2822800860;2822800861;2822800862;2822800864;2822800865;2822800866;1714787785;1714787731;1714787721;1714787707;1714787700;2823052866;2823052865;2823052863;1714787632;2823052862;1714787622;1289742147;2823058308;2823107007;2823107006;2823107005;2823107004;1304306533;1304306531;2824977101;1304306989;1304306997;1304306665;2824942998;1304306852;1304307254;1304306856;2824942997;1304306669;2824942996;1304306888;1304306460;2824939673;1304306778;1304306344;2824845294;2824845287;2824939670
            var expectedIds = new long[] {3240206929,2858734900,3240206928,2858734898,2858736004,2858736009,2858736007,2858736037,2858762424,2858762426,2858762427,2527408471,2858762458,2858767004,2858767005,3240206913,2858767006,2858768521,2858766698,2858768526,2858768517,2858776684,2527410953,2527410959,2527408460,2858789542,2858789562,2527408457,2527408453,2527408451,2527408448,2527408445,2527408442,2527408439,2527408437,2858877467,2527408434,2527408431,2527408429,2859978919,2527408426,3990984434,2527408423,2527408420,3990984433,2527408416,2527408413,3990984431,3990984430,3990984427,2527301728,3990984435,4075192320,2527408397,2527394272,2527394275,4442503244,1326628360,1704819677,4442503240,1704819674,4442503242,2860025778,2527394278,2527394280,1327035247,1704819584,1704819583,1704819582,1704819581,1704819552,2858676327,1704819544,1668155050,1704819514,1668155047,1704819485,2506546967,2506546966,5202462858,1704819458,2506546970,1704819454,5202462861,1725228461,2521258304,2521253404,2623048757,4442503248,2506547096,4389404976,4389404979,2506547090,2506546987,4389404986,1704843955,2506546994,1704732646,1704843952,1704732635,2857991933,2857991932,2857991931,2857991930,1704732582,1704732572,1704732540,2857991909,1704732543,1704732538,1704732536,2857991924,2857991911,1704732533,1704732529,1704732528,1704732521,2857020295,3240206425,2857020294,1704732415,1704732275,1704732060,1704731947,1704731819,4952722773,1704731697,1704731618,2653769676,4422009779,4422009784,1704731492,1704731400,1704731325,1704731141,2508952363,4301339282,1704731040,1704730963,2281378243,1704730922,2338622946,4396289668,1704730612,4396289669,4396289670,4396289671,5143779464,2338622972,2338622942,3726096057,2508980150,2508980155,3694547074,3694547041,3771292777,3771292778,3771292779,3771292780,3771292781,3771292782,3771292783,3771292784,3771292785,3694547062,4396343171,2506650013,4396343173,1892628887,1892628995,1892629021,1892628904,1892629253,1892629180,1892628915,1892629115,1892628913,1892629005,1892629006,2048208656,2048208683,264943621,2048208646,2048208720,2048208685,264943618,2048208713,2048208709,2048208665,264943616,2048208663,2048208659,1702963589,2048208644,2048208671,2048208635,1702963526,264943610,2854136337,2048208679,264943608,2048191382,2018997172,264943603,2048191384,2048191375,2048191364,2854137610,2048191366,264943595,1612590849,264943593,264943592,4476004524,2854130627,1892629235,5137545208,2048222684,2048222681,1702963416,2017571395,3990984245,4396367249,1702963423,1702963421,5137545213,2017571285,2017571271,2017571264,2017571236,2017571258,2017571247,2017571470,2017571480,2017571411,2017571224,1892629225,2069267735,2017571205,2017571391,2017571379,1895463095,1895468690,1895479612,4396414200,2017571490,2017571283,2017571494,2017571417,2017571413,2017571427,2017571288,2017571431,2017571298,2017571373,2017571201,264943665,4411522011,3761441152,3761447359,4109056605,1703094272,4228511567,264943666,264943668,4993449266,1903568762,1903568828,264943671,264943673,2245144912,264943675,264943676,1275276019,1275276036,2245172160,1275276080,1275276040,2245172159,1275276043,1275276079,1275276077,1903568109,5163833735,2240580420,5163833734,2275565964,1903568715,2274585372,2275555350,1275276065,1275276039,1275276120,4815982862,1275276129,1275276066,2426667548,4402649078,1285207995,1275276056,1275276146,1275276015,1275276098,5347872154,1275276137,1275276142,1275276141,1275276093,3364478042,3364447574,4349648401,4663428690,4663428689,1295783179,2624211652,1295783342,1288548141,1288548437,1288548419,2846077151,1703074856,1703074853,1703074848,1703074844,1703074840,1703074837,1703074834,2846077144,1295783062,2722597761,1295783241,1295783154,1295783164,1295783196,1295782996,1703403070,1703403054,1703403047,1703403034,1703403028,3240093693,1295782967,1295782805,1295783136,1295783309,2844130245,1703402968,2844122703,2844122702,1295783147,1295783676,1295783850,1295782828,1295783283,1295783867,1295782724,2844119139,2844119133,3920955061,1295783591,1295783073,1295783878,1295782750,4324462380,1295783772,1295783167,1295782934,1295782951,1295782557,1295783500,1295783223,1295782639,1295783752,1295783098,2722597712,2722597711,264899071,1302848053,4343796092,1302847924,1302847893,1302848007,1302847907,1302847928,2822761838,3418240323,1289742219,1714741268,1714741264,1289742181,1714788208,1714741241,1714741222,1714741216,1289742200,1289742083,1289742311,1304307196,1714741195,1290380605,1714788047,1290380586,1714741181,1714788041,1714788037,1714741175,1714788031,1289742211,1289742148,2822800581,2822800583,2822800585,1714787999,2822800849,2822800851,2822800852,2822800854,2822800855,2822800856,2822800857,2822800858,2822800859,1714787834,2822800860,2822800861,2822800862,2822800864,2822800865,2822800866,1714787785,1714787731,1714787721,1714787707,1714787700,2823052866,2823052865,2823052863,1714787632,2823052862,1714787622,1289742147,2823058308,2823107007,2823107006,2823107005,2823107004,1304306533,1304306531,2824977101,1304306989,1304306997,1304306665,2824942998,1304306852,1304307254,1304306856,2824942997,1304306669,2824942996,1304306888,1304306460,2824939673,1304306778,1304306344,2824845294,2824845287,2824939670};
            Graph graph = Import.LoadCityFromText(InfraTests.file_path + "Fortaleza-network-osm-2018-1_1.txt");

            SearchStrategy BruteForceStrategy = new BruteForce(graph);
            var p_3240206929 = graph.GetNodeById(3240206929);
            var p_2824939670 = graph.GetNodeById(2824939670);

            PathRoute pathRoute = BruteForceStrategy.Search(p_3240206929, p_2824939670, 50);

            Assert.Equal(EPathStatus.Found, pathRoute.Status);

            var resultIds = from node in pathRoute.Nodes select node.Id;

            Assert.Equal(Math.Round(26881.92779, InfraTests.ROUND_FIXED_FOR_DISTANCE), Math.Round(pathRoute.Distance, InfraTests.ROUND_FIXED_FOR_DISTANCE));
            Assert.Equal(466, pathRoute.Jumps);
            Assert.Equal(23977, pathRoute.QuantityOfExpansions);
            Assert.Equal(expectedIds, resultIds);
        }

        [Fact]
        public void BruteForceShouldReturntheCorrectPathForFortalezaFrom1714788084To4951315278()
        {
            // 1714788084,4951315278,478,0,25676,27856.44260411505,1714788084;1714788098;1714788156;1714788186;1714788190;2822782546;2822782539;1714788203;2822753032;2822753034;2822753036;2822753040;2822753044;2822754819;2822754809;2822754810;2822755240;2822771638;2822754827;2822754828;2822754829;2822754830;2822754831;2822754832;2822771678;2822754834;2822754836;2822754839;2822754840;2822761838;1302847928;1289741991;1302847993;4342952121;264899072;264898998;264898950;264899030;1295782598;1295782609;1295782802;1295783221;1295783326;1295782871;1295783228;1295782903;1295783878;1295783073;1295783591;3920955061;2844119133;2844119139;1295782724;1295783867;1295783283;1295782828;1295783850;1295783676;1295783147;2844122702;2844122703;1703402968;2844130245;1295783309;1275276121;1703403018;1275276089;1295783151;1295782962;4402735870;1295782604;1703403055;1703403071;1703403104;1703403126;1275276075;1295783585;1295783610;1295783707;1295782912;1295782558;2722597767;1275276155;2845981150;2845981153;2845981156;1703074849;1703074854;1703074857;1703074859;1703074862;2426576820;2426576823;1288548242;1288548239;2426576822;2845981138;2240620131;1295782798;1288548243;2722597781;1295783055;1288548273;1288548288;1288548251;2240350382;1288548180;1703056179;1288548390;1703056184;2240593328;1703056188;1288548344;1288548403;1288548149;1288548191;1288548189;1288548234;1288548410;1288548435;2240564118;1903563938;1275276030;2265431788;2245140034;2265496576;2265431789;2265431790;2265431791;1275276097;2267211871;1275276033;1275276150;264943731;1243889540;264943738;4228511566;4438994430;4109056608;3761441141;264943742;3761447360;4459614291;2017571226;2266561288;2017571262;2017571460;2017571423;2017571240;2017571399;2017571486;2017571349;2017571238;264943711;2017571492;2017571214;2017571484;264943703;2017571231;4202768702;1702929086;1895469170;2017571474;1895463725;2017571538;2017571260;1895459268;1895459604;2283272572;264943646;2017571290;2017571455;2017571389;2017571397;2017571237;2017571208;5137545212;1892629052;2017571429;1895442677;1895446688;1895443017;2017571425;3248751592;2048222686;4323507273;263929433;5137545207;2854224088;1892629051;4475941077;2854224084;5137545206;1892628960;2854224073;2854224071;2854224069;2854224067;2854158069;2048191378;1702857789;264943558;1892629053;264943561;2048191373;1702857802;2048208675;2854153713;4396343177;2048208718;5166206490;4396343175;264943569;2048208674;2048208669;2048208693;2048208716;2048208654;2048208642;2048208657;2048208721;2048208699;2048208698;2048208705;2048208715;1892629049;2856166591;5347995589;1892629113;1893510726;2506650018;4396343174;1892629066;1892629011;1892629266;1892629014;2506649997;2722597822;2506650009;2408832958;2283276809;2653823631;4434120659;3694547097;3694547039;3694547073;3694547032;3694547038;3694547071;3694547070;3694547063;3694546524;3694547056;3694547026;3694547033;3694547053;3694547072;3694547096;3694547075;3694547068;3694546522;3694547089;3694547084;3694547095;3694547083;2506608712;2506649994;2653726374;2506608713;2653726376;2506608714;4396289670;264955114;264955115;2506630952;2506630955;2914812697;264955118;264955119;2653761767;4396288744;2653765728;264955122;2281386296;264955125;264955126;264955127;1704730609;2281386299;4952722181;2858074948;1704730639;2653765747;1704730704;2858074979;2858074984;2653765755;1704730728;2858074991;1704730946;4952722179;1704731009;1704731012;1704731079;1704731105;1704731221;1704731311;1704731326;1704731393;1704731481;2654185540;2654185542;1704731688;1704731735;2858063628;5202432487;2858051993;1704732216;1704732227;1704732379;1704732454;1704732472;2858046927;5371262019;2623048753;2623048754;2623048758;3240196646;2521279625;2521253404;4389392797;2506608621;2506608591;2506546974;5202462860;2506546971;5202462881;5368276552;2506546978;2506546980;1704819483;2503390900;2506546984;1704819485;1668155047;2527301706;2527301707;2527301705;1704819487;1704819518;2527301708;1326628342;1326628361;1327035249;1326628346;2527329245;1326628356;2527329219;2527329181;2503390904;2503786511;2527329273;2503786510;2527329231;2860014192;2503786509;2503786506;2527301701;1704819355;2503786461;1704819353;2527349224;2503786489;2503786496;2527349232;2503786503;2503786505;2503786504;582268035;582268058;2503786516;4424927525;2503798904;582268057;3990984444;2885460760;1704862792;582268056;3990997663;2885460765;1704862758;2860536327;2885460770;1704862702;2885460779;1704862693;2860536332;2885460787;2511560574;2860419526;622415315;2860419542;2860418846;622394186;622394236;1704862566;622394225;1704862563;2860415124;1704862545;1704862543;2860414111;2860414113;1704862536;1704862530;3233731258;1704862516;1704862513;2860407853;1704862498;1704862482;1704862476;1704862467;2860407842;1704862444;2860407836;2511560573;2860407830;1704862422;2860407824;2511560555;3772127067;2511560556;2511567230;2511560557;3789269033;3789269042;2511567232;2511560558;2511560559;2511567233;2511560560;2511560561;2511567228;3772127069;2511576189;2511576157;2511576158;2860338365;2511576159;4951313520;2511576161;2511576162;2511576163;2511576164;4951315235;4951315233;4951315238;2511576165;4951315229;2511576166;4951315242;4951315240;4951315241;2511576167;4951315248;2511576168;2511576176;2511576177;4951315257;2511576178;2511576179;4951315259;2511576180;2511576181;2511576182;2511576175;2511576183;2511576184
            var expectedIds = new long[] {1714788084,1714788098,1714788156,1714788186,1714788190,2822782546,2822782539,1714788203,2822753032,2822753034,2822753036,2822753040,2822753044,2822754819,2822754809,2822754810,2822755240,2822771638,2822754827,2822754828,2822754829,2822754830,2822754831,2822754832,2822771678,2822754834,2822754836,2822754839,2822754840,2822761838,1302847928,1289741991,1302847993,4342952121,264899072,264898998,264898950,264899030,1295782598,1295782609,1295782802,1295783221,1295783326,1295782871,1295783228,1295782903,1295783878,1295783073,1295783591,3920955061,2844119133,2844119139,1295782724,1295783867,1295783283,1295782828,1295783850,1295783676,1295783147,2844122702,2844122703,1703402968,2844130245,1295783309,1275276121,1703403018,1275276089,1295783151,1295782962,4402735870,1295782604,1703403055,1703403071,1703403104,1703403126,1275276075,1295783585,1295783610,1295783707,1295782912,1295782558,2722597767,1275276155,2845981150,2845981153,2845981156,1703074849,1703074854,1703074857,1703074859,1703074862,2426576820,2426576823,1288548242,1288548239,2426576822,2845981138,2240620131,1295782798,1288548243,2722597781,1295783055,1288548273,1288548288,1288548251,2240350382,1288548180,1703056179,1288548390,1703056184,2240593328,1703056188,1288548344,1288548403,1288548149,1288548191,1288548189,1288548234,1288548410,1288548435,2240564118,1903563938,1275276030,2265431788,2245140034,2265496576,2265431789,2265431790,2265431791,1275276097,2267211871,1275276033,1275276150,264943731,1243889540,264943738,4228511566,4438994430,4109056608,3761441141,264943742,3761447360,4459614291,2017571226,2266561288,2017571262,2017571460,2017571423,2017571240,2017571399,2017571486,2017571349,2017571238,264943711,2017571492,2017571214,2017571484,264943703,2017571231,4202768702,1702929086,1895469170,2017571474,1895463725,2017571538,2017571260,1895459268,1895459604,2283272572,264943646,2017571290,2017571455,2017571389,2017571397,2017571237,2017571208,5137545212,1892629052,2017571429,1895442677,1895446688,1895443017,2017571425,3248751592,2048222686,4323507273,263929433,5137545207,2854224088,1892629051,4475941077,2854224084,5137545206,1892628960,2854224073,2854224071,2854224069,2854224067,2854158069,2048191378,1702857789,264943558,1892629053,264943561,2048191373,1702857802,2048208675,2854153713,4396343177,2048208718,5166206490,4396343175,264943569,2048208674,2048208669,2048208693,2048208716,2048208654,2048208642,2048208657,2048208721,2048208699,2048208698,2048208705,2048208715,1892629049,2856166591,5347995589,1892629113,1893510726,2506650018,4396343174,1892629066,1892629011,1892629266,1892629014,2506649997,2722597822,2506650009,2408832958,2283276809,2653823631,4434120659,3694547097,3694547039,3694547073,3694547032,3694547038,3694547071,3694547070,3694547063,3694546524,3694547056,3694547026,3694547033,3694547053,3694547072,3694547096,3694547075,3694547068,3694546522,3694547089,3694547084,3694547095,3694547083,2506608712,2506649994,2653726374,2506608713,2653726376,2506608714,4396289670,264955114,264955115,2506630952,2506630955,2914812697,264955118,264955119,2653761767,4396288744,2653765728,264955122,2281386296,264955125,264955126,264955127,1704730609,2281386299,4952722181,2858074948,1704730639,2653765747,1704730704,2858074979,2858074984,2653765755,1704730728,2858074991,1704730946,4952722179,1704731009,1704731012,1704731079,1704731105,1704731221,1704731311,1704731326,1704731393,1704731481,2654185540,2654185542,1704731688,1704731735,2858063628,5202432487,2858051993,1704732216,1704732227,1704732379,1704732454,1704732472,2858046927,5371262019,2623048753,2623048754,2623048758,3240196646,2521279625,2521253404,4389392797,2506608621,2506608591,2506546974,5202462860,2506546971,5202462881,5368276552,2506546978,2506546980,1704819483,2503390900,2506546984,1704819485,1668155047,2527301706,2527301707,2527301705,1704819487,1704819518,2527301708,1326628342,1326628361,1327035249,1326628346,2527329245,1326628356,2527329219,2527329181,2503390904,2503786511,2527329273,2503786510,2527329231,2860014192,2503786509,2503786506,2527301701,1704819355,2503786461,1704819353,2527349224,2503786489,2503786496,2527349232,2503786503,2503786505,2503786504,582268035,582268058,2503786516,4424927525,2503798904,582268057,3990984444,2885460760,1704862792,582268056,3990997663,2885460765,1704862758,2860536327,2885460770,1704862702,2885460779,1704862693,2860536332,2885460787,2511560574,2860419526,622415315,2860419542,2860418846,622394186,622394236,1704862566,622394225,1704862563,2860415124,1704862545,1704862543,2860414111,2860414113,1704862536,1704862530,3233731258,1704862516,1704862513,2860407853,1704862498,1704862482,1704862476,1704862467,2860407842,1704862444,2860407836,2511560573,2860407830,1704862422,2860407824,2511560555,3772127067,2511560556,2511567230,2511560557,3789269033,3789269042,2511567232,2511560558,2511560559,2511567233,2511560560,2511560561,2511567228,3772127069,2511576189,2511576157,2511576158,2860338365,2511576159,4951313520,2511576161,2511576162,2511576163,2511576164,4951315235,4951315233,4951315238,2511576165,4951315229,2511576166,4951315242,4951315240,4951315241,2511576167,4951315248,2511576168,2511576176,2511576177,4951315257,2511576178,2511576179,4951315259,2511576180,2511576181,2511576182,2511576175,2511576183,2511576184};
            Graph graph = Import.LoadCityFromText(InfraTests.file_path + "Fortaleza-network-osm-2018-1_1.txt");

            SearchStrategy BruteForceStrategy = new BruteForce(graph);
            var p_1714788084 = graph.GetNodeById(1714788084); // 1714788084: -3.7320825,-38.6027661
            var p_4951315278 = graph.GetNodeById(4951315278); // 4951315278: -3.8097955,-38.4338986

            PathRoute pathRoute = BruteForceStrategy.Search(p_1714788084, p_4951315278, 50);

            // Console.WriteLine(p_2511576184.Position.DistanceFunction(p_4951315278.Position, p_2511576184.Position));
            Assert.Equal(EPathStatus.Found, pathRoute.Status);

            var resultIds = from node in pathRoute.Nodes select node.Id;

            Assert.Equal(Math.Round(27856.44260, InfraTests.ROUND_FIXED_FOR_DISTANCE), Math.Round(pathRoute.Distance, InfraTests.ROUND_FIXED_FOR_DISTANCE));
            Assert.Equal(478, pathRoute.Jumps);
            Assert.Equal(41478, pathRoute.QuantityOfExpansions);
            Assert.Equal(expectedIds, resultIds);
        }

        [Fact]
        public void BruteForceShouldReturntheCorrectPathForFortalezaFrom2824831249To5301570028()
        {
            // 2824831249,5301570028,474,0,11830,30138.638874806144,2824831233;2824831251;2824824510;2824824507;2824824509;2824824508;1304306656;1714769503;1714769509;1714769536;2824827154;2824827153;1714769590;1304306696;2824939661;1304306428;4426716082;1304306595;1304306567;1304306442;1304306741;1304306917;1304307274;1304306548;1295889388;1304306943;1304306838;2824981296;1295889270;1295889415;2824980965;4433972815;3418240321;2823366374;2823366373;2823366372;2823371301;2823371305;2823366346;2823366360;2823366344;2823366338;2823366343;1714787614;1714787620;2823366355;1290380599;1304306779;1290380589;1290380575;1714740917;3265478484;4426512887;1304306870;1714741017;1304306673;1304306641;1714741091;1714741140;1714741159;1714741180;2285082709;1304307196;1289742311;1289742083;1289742200;1714741216;1714741222;1714741241;1714788208;1289742181;1714741264;1714741268;1289742219;3418240323;2822761838;1302847928;1289741991;1302847993;4342952121;264899072;264898998;264898950;264899030;1295782598;1295782609;1295782802;1295783221;1295783326;1295782871;1295783228;1295782903;1295783878;1295783073;1295783591;3920955061;2844119133;2844119139;1295782724;1295783867;1295783283;1295782828;1295783850;1295783676;1295783147;2844122702;2844122703;1703402968;2844130245;1295783309;1275276121;1703403018;1275276089;1295783151;1295782962;4402735870;1295782604;1703403055;1703403071;1703403104;1703403126;1275276075;1295783585;1295783610;1295783707;1295782912;1295782558;2722597767;1275276155;2845981150;2845981153;2845981156;1703074849;1703074854;1703074857;1703074859;1703074862;2426576820;2426576823;1288548242;1288548239;2426576822;2845981138;2240620131;1295782798;1288548243;2722597781;1295783055;1288548273;1288548288;1288548251;2240350382;1288548180;1703056179;1288548390;1703056184;2240593328;1703056188;1288548344;1288548403;1288548149;1288548191;1288548189;1288548234;1288548410;1288548435;2240564118;1903563938;1275276030;2265431788;2245140034;2265496576;2265431789;2265431790;2265431791;1275276097;2267211871;1275276033;1275276150;264943731;1243889540;264943738;4228511566;4438994430;4109056608;3761441141;264943742;3761447360;4459614291;2017571226;2266561288;2017571262;2017571460;2017571423;2017571240;2017571399;2017571486;2017571349;2017571238;264943711;2017571492;2017571214;2017571484;264943703;2017571231;4202768702;1702929086;1895469170;2017571474;1895463725;2017571538;2017571260;1895459268;1895459604;2283272572;264943646;2017571290;2017571455;2017571389;2017571397;2017571237;2017571208;5137545212;1892629052;2017571429;1895442677;1895446688;1895443017;2017571425;3248751592;2048222686;4323507273;263929433;5137545207;2854224088;1892629051;4475941077;2854224084;5137545206;1892628960;2854224073;2854224071;2854224069;2854224067;2854158069;2048191378;1702857789;264943558;1892629053;264943561;2048191373;1702857802;2048208675;2854153713;4396343177;2048208718;5166206490;4396343175;264943569;2048208674;2048208669;2048208693;2048208716;2048208654;2048208642;2048208657;2048208721;2048208699;2048208698;2048208705;2048208715;1892629049;2856166591;5347995589;1892629113;1893510726;2506650018;4396343174;1892629066;1892629011;1892629266;1892629014;2506649997;2722597822;2506650009;2408832958;2283276809;2653823631;4434120659;3694547097;3694547039;3694547073;3694547032;3694547038;3694547071;3694547070;3694547063;3694546524;3694547056;3694547026;3694547033;3694547053;3694547072;3694547096;3694547075;3694547068;3694546522;3694547089;3694547084;3694547095;3694547083;2506608712;2506649994;2653726374;2506608713;2653726376;2506608714;4396289670;264955114;264955115;2506630952;2506630955;2914812697;264955118;264955119;2653761767;4396288744;2653765728;264955122;2281386296;264955125;264955126;264955127;1704730609;2281386299;4952722181;2858074948;1704730639;2653765747;1704730704;2858074979;2858074984;2653765755;1704730728;2858074991;1704730946;2858077275;1704730972;1704731006;2653796281;2653796284;2653796287;1704731102;1704731188;1704731266;1704731318;1704731443;4952722176;2858063637;4952722160;1704731546;2858063636;1704731699;1704731770;1704731906;1704732072;2858046936;2858046925;253390854;2521252307;253390855;2521279623;5202462863;253390856;5202462862;2506546963;253390857;5202462865;5202462864;2521244258;2862354323;2862354326;1704844088;1704844116;2862354342;2862465483;2527361802;1704844196;4481724456;2862296532;2419606852;2862295834;2527301783;4481724457;4481736942;2862294294;253390858;2862283054;2527301785;5178148718;1940000898;5178148722;1940000589;5178148723;4481736947;2527301750;1938809894;4481736949;253390860;2527401909;5178148708;2527401903;253390861;2527379979;253390862;2527388956;2527401895;253390863;3994091268;3994091267;253390864;1940000509;1940000757;1938809924;5178148786;2527400241;253390865;2862103272;253390866;2527379981;2862103258;2862103274;2862103257;3240221580;3240221579;2862103256;3240221578;2862103242;3240221577;2862103255;3240221581;2862103247;2862085527;2862085526;2862085525;2862085524;2862085533;2862085532;2862085535;3240221585;2862085538;2862085539;2862085540;2862085541;2862085542;2862085543;5301570046;5301570045;5301570044;5301570043;5301570042;5301570041;5301570040;5301570039;5301570038;5301570037;5301570036;5301570035;5301570034;5301570033;5301570032;5301570031;5301570030;5301570029;5301570028
            var expectedIds = new long[] {2824831233,2824831251,2824824510,2824824507,2824824509,2824824508,1304306656,1714769503,1714769509,1714769536,2824827154,2824827153,1714769590,1304306696,2824939661,1304306428,4426716082,1304306595,1304306567,1304306442,1304306741,1304306917,1304307274,1304306548,1295889388,1304306943,1304306838,2824981296,1295889270,1295889415,2824980965,4433972815,3418240321,2823366374,2823366373,2823366372,2823371301,2823371305,2823366346,2823366360,2823366344,2823366338,2823366343,1714787614,1714787620,2823366355,1290380599,1304306779,1290380589,1290380575,1714740917,3265478484,4426512887,1304306870,1714741017,1304306673,1304306641,1714741091,1714741140,1714741159,1714741180,2285082709,1304307196,1289742311,1289742083,1289742200,1714741216,1714741222,1714741241,1714788208,1289742181,1714741264,1714741268,1289742219,3418240323,2822761838,1302847928,1289741991,1302847993,4342952121,264899072,264898998,264898950,264899030,1295782598,1295782609,1295782802,1295783221,1295783326,1295782871,1295783228,1295782903,1295783878,1295783073,1295783591,3920955061,2844119133,2844119139,1295782724,1295783867,1295783283,1295782828,1295783850,1295783676,1295783147,2844122702,2844122703,1703402968,2844130245,1295783309,1275276121,1703403018,1275276089,1295783151,1295782962,4402735870,1295782604,1703403055,1703403071,1703403104,1703403126,1275276075,1295783585,1295783610,1295783707,1295782912,1295782558,2722597767,1275276155,2845981150,2845981153,2845981156,1703074849,1703074854,1703074857,1703074859,1703074862,2426576820,2426576823,1288548242,1288548239,2426576822,2845981138,2240620131,1295782798,1288548243,2722597781,1295783055,1288548273,1288548288,1288548251,2240350382,1288548180,1703056179,1288548390,1703056184,2240593328,1703056188,1288548344,1288548403,1288548149,1288548191,1288548189,1288548234,1288548410,1288548435,2240564118,1903563938,1275276030,2265431788,2245140034,2265496576,2265431789,2265431790,2265431791,1275276097,2267211871,1275276033,1275276150,264943731,1243889540,264943738,4228511566,4438994430,4109056608,3761441141,264943742,3761447360,4459614291,2017571226,2266561288,2017571262,2017571460,2017571423,2017571240,2017571399,2017571486,2017571349,2017571238,264943711,2017571492,2017571214,2017571484,264943703,2017571231,4202768702,1702929086,1895469170,2017571474,1895463725,2017571538,2017571260,1895459268,1895459604,2283272572,264943646,2017571290,2017571455,2017571389,2017571397,2017571237,2017571208,5137545212,1892629052,2017571429,1895442677,1895446688,1895443017,2017571425,3248751592,2048222686,4323507273,263929433,5137545207,2854224088,1892629051,4475941077,2854224084,5137545206,1892628960,2854224073,2854224071,2854224069,2854224067,2854158069,2048191378,1702857789,264943558,1892629053,264943561,2048191373,1702857802,2048208675,2854153713,4396343177,2048208718,5166206490,4396343175,264943569,2048208674,2048208669,2048208693,2048208716,2048208654,2048208642,2048208657,2048208721,2048208699,2048208698,2048208705,2048208715,1892629049,2856166591,5347995589,1892629113,1893510726,2506650018,4396343174,1892629066,1892629011,1892629266,1892629014,2506649997,2722597822,2506650009,2408832958,2283276809,2653823631,4434120659,3694547097,3694547039,3694547073,3694547032,3694547038,3694547071,3694547070,3694547063,3694546524,3694547056,3694547026,3694547033,3694547053,3694547072,3694547096,3694547075,3694547068,3694546522,3694547089,3694547084,3694547095,3694547083,2506608712,2506649994,2653726374,2506608713,2653726376,2506608714,4396289670,264955114,264955115,2506630952,2506630955,2914812697,264955118,264955119,2653761767,4396288744,2653765728,264955122,2281386296,264955125,264955126,264955127,1704730609,2281386299,4952722181,2858074948,1704730639,2653765747,1704730704,2858074979,2858074984,2653765755,1704730728,2858074991,1704730946,2858077275,1704730972,1704731006,2653796281,2653796284,2653796287,1704731102,1704731188,1704731266,1704731318,1704731443,4952722176,2858063637,4952722160,1704731546,2858063636,1704731699,1704731770,1704731906,1704732072,2858046936,2858046925,253390854,2521252307,253390855,2521279623,5202462863,253390856,5202462862,2506546963,253390857,5202462865,5202462864,2521244258,2862354323,2862354326,1704844088,1704844116,2862354342,2862465483,2527361802,1704844196,4481724456,2862296532,2419606852,2862295834,2527301783,4481724457,4481736942,2862294294,253390858,2862283054,2527301785,5178148718,1940000898,5178148722,1940000589,5178148723,4481736947,2527301750,1938809894,4481736949,253390860,2527401909,5178148708,2527401903,253390861,2527379979,253390862,2527388956,2527401895,253390863,3994091268,3994091267,253390864,1940000509,1940000757,1938809924,5178148786,2527400241,253390865,2862103272,253390866,2527379981,2862103258,2862103274,2862103257,3240221580,3240221579,2862103256,3240221578,2862103242,3240221577,2862103255,3240221581,2862103247,2862085527,2862085526,2862085525,2862085524,2862085533,2862085532,2862085535,3240221585,2862085538,2862085539,2862085540,2862085541,2862085542,2862085543,5301570046,5301570045,5301570044,5301570043,5301570042,5301570041,5301570040,5301570039,5301570038,5301570037,5301570036,5301570035,5301570034,5301570033,5301570032,5301570031,5301570030,5301570029,5301570028};
            Graph graph = Import.LoadCityFromText(InfraTests.file_path + "Fortaleza-network-osm-2018-1_1.txt");

            SearchStrategy BruteForceStrategy = new BruteForce(graph);
            var p_2824831249 = graph.GetNodeById(2824831249);
            var p_5301570028 = graph.GetNodeById(5301570028); // 4951315278: -3.8097955,-38.4338986

            PathRoute pathRoute = BruteForceStrategy.Search(p_2824831249, p_5301570028, 50);

            Assert.Equal(EPathStatus.Found, pathRoute.Status);

            var resultIds = from node in pathRoute.Nodes select node.Id;

            Assert.Equal(Math.Round(30138.63887, InfraTests.ROUND_FIXED_FOR_DISTANCE), Math.Round(pathRoute.Distance, InfraTests.ROUND_FIXED_FOR_DISTANCE));
            Assert.Equal(474, pathRoute.Jumps);
            Assert.Equal(42522, pathRoute.QuantityOfExpansions);
            Assert.Equal(expectedIds, resultIds);
        }

        [Fact]
        public void BruteForceShouldReturntheCorrectPathForFortalezaFrom2518371280To1704432085()
        {
            // 2518371280,1704432085,236,0,3883,15502.307180268579,2858142596;2858142599;2858142600;2858141707;2518367027;2858139697;2858141705;2518367026;2504538926;2858139689;5047127603;264954716;264954710;622541314;2794860284;622541381;4440651247;2504538942;622541186;253390958;253390959;253390982;3816414754;622541201;622541204;253390882;253390883;253390884;253390885;1974309513;2283197355;253390888;2283197354;253390889;253390890;2281462076;253390891;2281462073;253390793;2281461454;253390792;2281462078;2281461449;2504592750;253390901;253390791;2422683832;622541286;622541279;2856243310;253390790;253390789;2504592747;2508980113;2504592748;2274590442;2274590441;253390787;2856243323;253390786;2422698131;253390784;263929677;2274590371;253390783;2274590369;253390782;263929679;2274590368;4680736322;253390780;2274590366;2274590367;1898402929;1898394257;2722597796;1897534771;5112788401;2504583277;1898385354;2422719329;1898385358;1897551876;1897524342;2722597792;2274588153;1897523099;1897519757;1897519759;1728558960;2422729047;5357370145;253390826;2279071315;2279071316;253390827;2279071312;1728558949;2279071304;253390828;2279071305;253390829;2279071308;253390830;2069267712;1728558961;263929607;2069267728;263929610;2504594610;2069267684;2069267734;2069267680;2069267709;2069267683;628524625;628524956;263929642;628524959;265639841;628524937;628524877;628524880;628524882;628524885;628524887;628525276;628524683;628524061;628524062;628524063;5220036901;4411522006;4411522007;4411522008;4411522009;4411522010;4411522011;3761441152;3761447359;4109056605;1703094272;4228511567;4228511566;4438994430;4438994429;2240318958;2269598286;3702928167;2269598285;1663130727;1703057047;1703057063;1663130734;3702970087;3702970093;5226479524;1703057140;1703057170;5226479525;1663130757;3978750937;1663130760;1703057221;1703057230;5226478989;1703057233;1663130779;1663130782;1703057244;2874531014;2280381058;1703057254;1703057262;1663130803;1663130815;1663130823;1703108207;1663130826;1703057282;1663130837;1703057286;1703057300;1703057307;1703057312;2874685292;2050384904;2874685291;2050384738;2050384997;2874685296;1703108413;2050384898;1703108421;5241285962;5241285964;2050385065;1663130908;1703108428;2874692839;1703108459;1703547889;1703108481;1703108487;5381458497;1703108490;1703108493;1703108495;1703108505;1703547893;2874693550;1704450223;1703547939;1703547946;1703547967;1703548021;5331865643;5331865642;1703548075;1704431780;1704431819;1704431822;1704431831;2875041457;1704431861;2876163395;1704431877;2876163387;2876163385;1704431923;1704431958;1704431967;1704431987;1704432000;1704432032;1704432059;1704432105
            var expectedIds = new long[] {2858142596,2858142599,2858142600,2858141707,2518367027,2858139697,2858141705,2518367026,2504538926,2858139689,5047127603,264954716,264954710,622541314,2794860284,622541381,4440651247,2504538942,622541186,253390958,253390959,253390982,3816414754,622541201,622541204,253390882,253390883,253390884,253390885,1974309513,2283197355,253390888,2283197354,253390889,253390890,2281462076,253390891,2281462073,253390793,2281461454,253390792,2281462078,2281461449,2504592750,253390901,253390791,2422683832,622541286,622541279,2856243310,253390790,253390789,2504592747,2508980113,2504592748,2274590442,2274590441,253390787,2856243323,253390786,2422698131,253390784,263929677,2274590371,253390783,2274590369,253390782,263929679,2274590368,4680736322,253390780,2274590366,2274590367,1898402929,1898394257,2722597796,1897534771,5112788401,2504583277,1898385354,2422719329,1898385358,1897551876,1897524342,2722597792,2274588153,1897523099,1897519757,1897519759,1728558960,2422729047,5357370145,253390826,2279071315,2279071316,253390827,2279071312,1728558949,2279071304,253390828,2279071305,253390829,2279071308,253390830,2069267712,1728558961,263929607,2069267728,263929610,2504594610,2069267684,2069267734,2069267680,2069267709,2069267683,628524625,628524956,263929642,628524959,265639841,628524937,628524877,628524880,628524882,628524885,628524887,628525276,628524683,628524061,628524062,628524063,5220036901,4411522006,4411522007,4411522008,4411522009,4411522010,4411522011,3761441152,3761447359,4109056605,1703094272,4228511567,4228511566,4438994430,4438994429,2240318958,2269598286,3702928167,2269598285,1663130727,1703057047,1703057063,1663130734,3702970087,3702970093,5226479524,1703057140,1703057170,5226479525,1663130757,3978750937,1663130760,1703057221,1703057230,5226478989,1703057233,1663130779,1663130782,1703057244,2874531014,2280381058,1703057254,1703057262,1663130803,1663130815,1663130823,1703108207,1663130826,1703057282,1663130837,1703057286,1703057300,1703057307,1703057312,2874685292,2050384904,2874685291,2050384738,2050384997,2874685296,1703108413,2050384898,1703108421,5241285962,5241285964,2050385065,1663130908,1703108428,2874692839,1703108459,1703547889,1703108481,1703108487,5381458497,1703108490,1703108493,1703108495,1703108505,1703547893,2874693550,1704450223,1703547939,1703547946,1703547967,1703548021,5331865643,5331865642,1703548075,1704431780,1704431819,1704431822,1704431831,2875041457,1704431861,2876163395,1704431877,2876163387,2876163385,1704431923,1704431958,1704431967,1704431987,1704432000,1704432032,1704432059,1704432105};
            Graph graph = Import.LoadCityFromText(InfraTests.file_path + "Fortaleza-network-osm-2018-1_1.txt");

            SearchStrategy BruteForceStrategy = new BruteForce(graph);
            var p_2518371280 = graph.GetNodeById(2518371280);
            var p_1704432085 = graph.GetNodeById(1704432085);

            PathRoute pathRoute = BruteForceStrategy.Search(p_2518371280, p_1704432085, 50);

            Assert.Equal(EPathStatus.Found, pathRoute.Status);

            var resultIds = from node in pathRoute.Nodes select node.Id;

            Assert.Equal(Math.Round(15502.30718, InfraTests.ROUND_FIXED_FOR_DISTANCE), Math.Round(pathRoute.Distance, InfraTests.ROUND_FIXED_FOR_DISTANCE));
            Assert.Equal(236, pathRoute.Jumps);
            Assert.Equal(10038, pathRoute.QuantityOfExpansions);
            Assert.Equal(expectedIds, resultIds);
        }

        [Fact]
        public void BruteForceShouldReturntheCorrectPathForFortalezaFrom1703464525To1288548279()
        {
            // 1703464525,1288548279,105,0,648,5774.287180236894,1703464525;1703464414;1703464425;1703464436;1295783184;2844318242;1703403256;1703403262;4402789507;1703403265;2844318267;2844318271;1295783069;4844760206;4402789506;1295783462;4844764530;1703403291;1703403311;1703403345;1703403372;1703403379;1703403378;1703403308;1703403343;1703403373;1703403401;1703403412;1703403426;1703403444;3978271741;1703074874;1703074877;1703074881;1703074883;2845974529;2845974531;1703074889;2845974535;1703074892;2240634033;2240634031;2240634030;2240634035;2240634026;2240634037;2426622283;2240634041;2426622274;1703074890;1703074888;1703074885;1295782798;2240620133;2240620119;2240620120;1295782555;1295783179;4663423472;4663423481;1295783046;4663428699;2240431596;3364447579;3364469855;4402804849;4402804851;4402804853;1295783270;1285208016;1288548154;1285208010;1288548443;1288548322;1288548425;1285208027;1275276108;1288548252;1288548416;2242354380;2242354391;2242354377;2242354389;2242354386;1288548413;2867779903;1288548317;3789345699;3789345700;3789345701;1288548171;1288548260;1288548311;1288548394;1288548323;1288548401;1288548286;1288548301;1288548263;2846612533;2846612536;2285050024;1288548235;2846641666;2846612540;2846612544
            var expectedIds = new long[] {1703464525,1703464414,1703464425,1703464436,1295783184,2844318242,1703403256,1703403262,4402789507,1703403265,2844318267,2844318271,1295783069,4844760206,4402789506,1295783462,4844764530,1703403291,1703403311,1703403345,1703403372,1703403379,1703403378,1703403308,1703403343,1703403373,1703403401,1703403412,1703403426,1703403444,3978271741,1703074874,1703074877,1703074881,1703074883,2845974529,2845974531,1703074889,2845974535,1703074892,2240634033,2240634031,2240634030,2240634035,2240634026,2240634037,2426622283,2240634041,2426622274,1703074890,1703074888,1703074885,1295782798,2240620133,2240620119,2240620120,1295782555,1295783179,4663423472,4663423481,1295783046,4663428699,2240431596,3364447579,3364469855,4402804849,4402804851,4402804853,1295783270,1285208016,1288548154,1285208010,1288548443,1288548322,1288548425,1285208027,1275276108,1288548252,1288548416,2242354380,2242354391,2242354377,2242354389,2242354386,1288548413,2867779903,1288548317,3789345699,3789345700,3789345701,1288548171,1288548260,1288548311,1288548394,1288548323,1288548401,1288548286,1288548301,1288548263,2846612533,2846612536,2285050024,1288548235,2846641666,2846612540,2846612544};
            Graph graph = Import.LoadCityFromText(InfraTests.file_path + "Fortaleza-network-osm-2018-1_1.txt");

            SearchStrategy BruteForceStrategy = new BruteForce(graph);
            var p_1703464525 = graph.GetNodeById(1703464525);
            var p_1288548279 = graph.GetNodeById(1288548279);

            PathRoute pathRoute = BruteForceStrategy.Search(p_1703464525, p_1288548279, 50);

            Assert.Equal(EPathStatus.Found, pathRoute.Status);

            var resultIds = from node in pathRoute.Nodes select node.Id;

            Assert.Equal(Math.Round(5774.28718, InfraTests.ROUND_FIXED_FOR_DISTANCE), Math.Round(pathRoute.Distance, InfraTests.ROUND_FIXED_FOR_DISTANCE));
            Assert.Equal(105, pathRoute.Jumps);
            Assert.Equal(3165, pathRoute.QuantityOfExpansions);
            Assert.Equal(expectedIds, resultIds);
        }
        // collapse tests
        // test search strategies

    }
}
